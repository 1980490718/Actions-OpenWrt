#
# https://github.com/P3TERX/Actions-OpenWrt
#
# File: .github/workflows/openwrt-bulder.yml
# Description: Build OpenWrt using GitHub Actions
#
# Copyright (c) 2019-2024 P3TERX <https://p3terx.com>
#
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#

name: ‚ö° Build lede AP4220-128M

on:
  repository_dispatch:
  workflow_dispatch:

env:
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: AP4220-128M.config
  DIY_P1_SH: diy-part1.sh
  DIY_P2_SH: diy-part2.sh
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai
  TOOLCHAIN_ARTIFACT_NAME_PREFIX: openwrt-toolchain-

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
    - name: üîç Checkout
      uses: actions/checkout@main

    - name: üõ†Ô∏è Initialize Environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc /opt/hostedtoolcache/CodeQL
        sudo docker image prune --all --force
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libfuse-dev libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libpython3-dev libreadline-dev libssl-dev libtool lrzsz mkisofs msmtp ninja-build p7zip p7zip-full patch pkgconf python2.7 python3 python3-pyelftools python3-setuptools qemu-utils rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir

    - name: üíæ Cache OpenWrt Source
      id: cache-source
      uses: actions/cache@v3
      with:
        path: /workdir/openwrt
        key: ${{ runner.os }}-openwrt-source-${{ env.REPO_BRANCH }}-${{ hashFiles('**/feeds.conf.default', '**/*.config', '**/diy-part1.sh', '**/diy-part2.sh') }}

    - name: üíæ Cache Feeds
      id: cache-feeds
      uses: actions/cache@v3
      with:
        path: openwrt/feeds
        key: ${{ runner.os }}-openwrt-feeds-${{ env.REPO_BRANCH }}-${{ hashFiles('**/feeds.conf.default') }}

    - name: üíæ Cache Downloaded Packages
      id: cache-packages
      uses: actions/cache@v3
      with:
        path: openwrt/dl
        key: ${{ runner.os }}-openwrt-packages-${{ env.REPO_BRANCH }}-${{ hashFiles('**/*.config') }}

    - name: üíæ Cache Compiled Objects
      id: cache-objects
      uses: actions/cache@v3
      with:
        path: openwrt/build_dir
        key: ${{ runner.os }}-openwrt-objects-${{ env.REPO_BRANCH }}-${{ hashFiles('**/*.config') }}

    - name: üíæ Cache Toolchain
      id: cache-toolchain
      uses: actions/cache@v3
      with:
        path: openwrt/staging_dir
        key: ${{ runner.os }}-openwrt-toolchain-${{ env.REPO_BRANCH }}-${{ hashFiles('**/*.config') }}

    - name: üîç Check for Toolchain in Releases
      if: steps.cache-toolchain.outputs.cache-hit != 'true'
      id: check-toolchain-release
      run: |
        TOOLCHAIN_ARTIFACT_NAME="${{ env.TOOLCHAIN_ARTIFACT_NAME_PREFIX }}${{ env.REPO_BRANCH }}-${{ hashFiles('**/*.config') }}"
        RELEASES=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" https://api.github.com/repos/${{ github.repository }}/releases)
        if echo "$RELEASES" | grep -q "$TOOLCHAIN_ARTIFACT_NAME"; then
          echo "toolchain_found=true" >> $GITHUB_OUTPUT
        else
          echo "toolchain_found=false" >> $GITHUB_OUTPUT
        fi

    - name: üì• Download Toolchain from Releases
      if: steps.cache-toolchain.outputs.cache-hit != 'true' && steps.check-toolchain-release.outputs.toolchain_found == 'true'
      run: |
        TOOLCHAIN_ARTIFACT_NAME="${{ env.TOOLCHAIN_ARTIFACT_NAME_PREFIX }}${{ env.REPO_BRANCH }}-${{ hashFiles('**/*.config') }}"
        RELEASE_ID=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" https://api.github.com/repos/${{ github.repository }}/releases | jq -r '.[] | select(.name | contains("'"$TOOLCHAIN_ARTIFACT_NAME"'")) | .id')
        ASSET_ID=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" https://api.github.com/repos/${{ github.repository }}/releases/$RELEASE_ID/assets | jq -r '.[] | select(.name | contains("toolchain.tar.gz")) | .id')
        curl -L -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" -H "Accept: application/octet-stream" https://api.github.com/repos/${{ github.repository }}/releases/assets/$ASSET_ID -o toolchain.tar.gz
        tar -xzvf toolchain.tar.gz -C openwrt

    - name: üî® Compile Toolchain
      if: steps.cache-toolchain.outputs.cache-hit != 'true' && steps.check-toolchain-release.outputs.toolchain_found == 'false'
      run: |
        cd openwrt
        make defconfig
        make toolchain/install -j$(nproc) || make toolchain/install -j1 || make toolchain/install -j1 V=s

    - name: üî® Compile Firmware
      id: compile
      run: |
        cd openwrt
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 || make -j1 V=s
        if [ $? -eq 0 ]; then
          echo "status=success" >> $GITHUB_OUTPUT
          grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
          [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
          echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV
        else
          echo "status=failed" >> $GITHUB_OUTPUT
        fi

    - name: üóÇÔ∏è Organize Files
      id: organize
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        if [ -d "openwrt/bin/targets" ]; then
          TARGET_DIR=$(find openwrt/bin/targets -type d -mindepth 2 -maxdepth 2 | head -n 1)
          if [ -n "$TARGET_DIR" ]; then
            cd "$TARGET_DIR"
            rm -rf packages
            echo "FIRMWARE=$PWD" >> $GITHUB_ENV
            echo "status=success" >> $GITHUB_OUTPUT
          else
            echo "No valid target directory found under openwrt/bin/targets"
            echo "status=failed" >> $GITHUB_OUTPUT
          fi
        else
          echo "openwrt/bin/targets directory does not exist"
          echo "status=failed" >> $GITHUB_OUTPUT
        fi

    - name: üì¶ Package Toolchain
      run: |
        cd openwrt
        tar -czvf toolchain.tar.gz staging_dir

    - name: üöÄ Upload Toolchain to Release
      uses: softprops/action-gh-release@master
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_RELEASE == 'true'
      env:
        GITHUB_TOKEN: ${{ secrets.WILLEM666 }}
      with:
        tag_name: ${{ env.TOOLCHAIN_ARTIFACT_NAME_PREFIX }}${{ env.REPO_BRANCH }}-${{ hashFiles('**/*.config') }}
        name: ${{ env.TOOLCHAIN_ARTIFACT_NAME_PREFIX }}${{ env.REPO_BRANCH }}-${{ hashFiles('**/*.config') }}
        files: openwrt/toolchain.tar.gz

    - name: üìä Check Space Usage
      if: (!cancelled())
      run: df -hT

    - name: üì§ Upload Bin Directory
      uses: actions/upload-artifact@main
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
      with:
        name: OpenWrt_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: openwrt/bin

    # ‰øÆÊîπ id ‰∏∫ organize_2
    - name: üóÇÔ∏è Organize Files
      id: organize_2
      if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        cd openwrt/bin/targets/*/*
        rm -rf packages
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "status=success" >> $GITHUB_OUTPUT

    - name: üì§ Upload Firmware
      # Êõ¥Êñ∞ÂºïÁî®ÁöÑ id
      if: steps.organize_2.outputs.status == 'success' && !cancelled()
      uses: actions/upload-artifact@main
      with:
        name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}

    - name: üè∑Ô∏è Generate Release Tag
      id: tag
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      run: |
        echo "release_tag=$(date +"%Y.%m.%d-%H%M")" >> $GITHUB_OUTPUT
        touch release.txt
        [ ${UPLOAD_GOFILE} = true && ${{ steps.gofile.outputs.url }} ] && echo "üîó [GoFile](${{ steps.gofile.outputs.url }})" >> release.txt
        echo "status=success" >> $GITHUB_OUTPUT

    - name: üöÄ Upload to Release
      uses: softprops/action-gh-release@master
      if: steps.tag.outputs.status == 'success' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.WILLEM666 }}
      with:
        tag_name: ${{ steps.tag.outputs.release_tag }}
        body_path: release.txt
        files: ${{ env.FIRMWARE }}/*

    - name: üóëÔ∏è Delete Workflow Runs
      uses: Mattraks/delete-workflow-runs@main
      with:
        retain_days: 0
        keep_minimum_runs: 2

    - name: üßπ Remove Old Releases
      uses: dev-drprasad/delete-older-releases@master
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      with:
        keep_latest: 3
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.WILLEM666 }}
